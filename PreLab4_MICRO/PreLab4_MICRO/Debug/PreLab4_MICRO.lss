
PreLab4_MICRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000019e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c8  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000283  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036a  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000015ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
	
}

void setup(void){ //Se utiliza void cuando no se emplean parámetros
	
	cli(); //Deshabilita interrupciones
  90:	f8 94       	cli
	
	UCSR0B = 0;
  92:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Puerto D como salidas
	DDRD = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  9a:	1b b8       	out	0x0b, r1	; 11
	
	//Pines PC0 y PC1 como entradas
	DDRC &= ~(1 << PINC0) | ~(1 << PINC1);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC0) | (1 << PINC1);
  a0:	88 b1       	in	r24, 0x08	; 8
  a2:	83 60       	ori	r24, 0x03	; 3
  a4:	88 b9       	out	0x08, r24	; 8
	
	// Interrupción
	PCICR |= (1<<PCIE1); // PCIE1 para puerto C
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
	PCMSK1 |= ((1<<PCINT8)|(1<<PCINT9)); // Habilita la interrupción en el puerto C -- PCMSK1 corresponde al puerto C -- PCINT8-PC0 y PCINT9-PC1
  b0:	ec e6       	ldi	r30, 0x6C	; 108
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	80 83       	st	Z, r24
	
	sei(); // Habilita las interrupciones 
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <main>:

void setup(void);

int main(void){ //Función main
	
	setup();
  be:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	
	//LOOP 
	while (1){
	
	PORTD = contador8bits; // Muestra en el puerto D lo que hay en el contador
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	fc cf       	rjmp	.-8      	; 0xc2 <main+0x4>

000000ca <__vector_4>:
	sei(); // Habilita las interrupciones 
	
}

//Interrupción 
ISR(PCINT1_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
	
	if (!(PINC & (1 << PINC0))) { 
  d6:	30 99       	sbic	0x06, 0	; 6
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <__vector_4+0x1c>
		// Cuando botón 0 presionado:
		contador8bits++;
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	1a c0       	rjmp	.+52     	; 0x11a <__vector_4+0x50>
		}
	else if (!(PINC & (1 << PINC1))) {
  e6:	31 99       	sbic	0x06, 1	; 6
  e8:	06 c0       	rjmp	.+12     	; 0xf6 <__vector_4+0x2c>
		// Cuando botón 1 presionado:
		contador8bits--;
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	12 c0       	rjmp	.+36     	; 0x11a <__vector_4+0x50>
	}
	else if((!(PINC & (1 << PINC0))) && (contador8bits==255))  {
  f6:	30 99       	sbic	0x06, 0	; 6
  f8:	07 c0       	rjmp	.+14     	; 0x108 <__vector_4+0x3e>
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	8f 3f       	cpi	r24, 0xFF	; 255
 100:	19 f4       	brne	.+6      	; 0x108 <__vector_4+0x3e>
		//Cuando el contador llegué a su máximo (255) y botón 0 presionado, entonces se suma  y regresa a 0
		contador8bits=0;
 102:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	09 c0       	rjmp	.+18     	; 0x11a <__vector_4+0x50>
	}
	else if((!(PINC & (1 << PINC1))) && (contador8bits==255))  {
 108:	31 99       	sbic	0x06, 1	; 6
 10a:	07 c0       	rjmp	.+14     	; 0x11a <__vector_4+0x50>
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	8f 3f       	cpi	r24, 0xFF	; 255
 112:	19 f4       	brne	.+6      	; 0x11a <__vector_4+0x50>
		//Cuando el contador llegué a su máximo (255) y botón 1 presionado, entonces se resta y regresa a 254
		contador8bits=254;
 114:	8e ef       	ldi	r24, 0xFE	; 254
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	else {
		// De lo contrario
		contador8bits=contador8bits;
	}
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
